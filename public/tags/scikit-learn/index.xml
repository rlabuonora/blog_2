
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>scikit-learn on Rafael La Buonora</title>
       <link>/tags/scikit-learn/</link>
       <description>Recent content in scikit-learn on Rafael La Buonora</description>
       <generator>Hugo -- gohugo.io</generator>
       <copyright>Copyright &amp;copy; 2019 - Rafael La Buonora</copyright>
       <lastBuildDate>Sun, 16 Jun 2019 00:00:00 +0000</lastBuildDate>
       
           <atom:link href="/tags/scikit-learn/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Prediciendo Precios de Propiedades con scikit-learn</title>
         <link>/posts/predicting-house-prices/</link>
         <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
         
         <guid>/posts/predicting-house-prices/</guid>
         <description>


&lt;p&gt;En este post armo un modelo de regresión para predecir el precio de venta de una propiedad inmobiliaria. Las columnas disponibles incluyen 80 columnas con información sobre la localización de las propiedades, su estructura y estado de conservación, su localización y la fecha y condiciones de la venta.&lt;/p&gt;
&lt;p&gt;En la primera parte importo y describo las columnas disponibles, identifico outliers en algunas variables importantes e implemento algunas correcciones.&lt;/p&gt;
&lt;p&gt;Luego estimo tres modelos para predecir la variable objetivo: el precio de venta de la propiedad. Dado que la variables es continua, uso 3 modelos de regresión: regresión lineal sin regularización, regresión Ridge y regresión Lasso.&lt;/p&gt;
&lt;p&gt;En la última parte analizo la performance del modelo y algunas posibles líneas para mejorarlo.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Importar módulos
import pandas as pd
import numpy as np
# Leer los datos 
casas = pd.read_csv(&amp;quot;../../public/data/precios_casas/train.csv&amp;quot;)

# Primeras filas
print(casas.head())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Id  MSSubClass MSZoning  ...  SaleType  SaleCondition SalePrice
## 0   1          60       RL  ...        WD         Normal    208500
## 1   2          20       RL  ...        WD         Normal    181500
## 2   3          60       RL  ...        WD         Normal    223500
## 3   4          70       RL  ...        WD        Abnorml    140000
## 4   5          60       RL  ...        WD         Normal    250000
## 
## [5 rows x 81 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cantidad de filas y columnas:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(casas.shape)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (1460, 81)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Columnas con datos faltantes&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(casas.isnull().any().sum())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Columnas numéricas con datos faltantes:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Seleccionar numéricas
numericas = casas.select_dtypes(include = [np.number])
# Columnas numéricas con faltantes
print(casas[numericas.columns[numericas.isnull().any()]].isnull().sum().sort_values(ascending = False))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## LotFrontage    259
## GarageYrBlt     81
## MasVnrArea       8
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Columnas categóricas
categoricas = casas.select_dtypes(include=[object])

# Columnas categóricas con faltantes
print(casas[categoricas.columns[categoricas.isnull().any()]].isnull().sum().sort_values(ascending = False))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## PoolQC          1453
## MiscFeature     1406
## Alley           1369
## Fence           1179
## FireplaceQu      690
## GarageCond        81
## GarageQual        81
## GarageFinish      81
## GarageType        81
## BsmtFinType2      38
## BsmtExposure      38
## BsmtFinType1      37
## BsmtCond          37
## BsmtQual          37
## MasVnrType         8
## Electrical         1
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;variable-objetivo-saleprice&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Variable objetivo: SalePrice&lt;/h1&gt;
&lt;p&gt;Es el precio de venta de la propiedad. Es continua y no tiene missings. La propiedad promedio se vendió en $ 180.920, la más barata salió $ 34.900 y la más cara $755.000. Tiene distribución asimétrica, con la cola larga a la derecha (es más probable que una casa sea más cara que más barata que el promedio). Esta asimetría hace que sea conveniente normalizarla para modelarla.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;casas[[&amp;quot;SalePrice&amp;quot;]].describe()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            SalePrice
## count    1460.000000
## mean   180921.195890
## std     79442.502883
## min     34900.000000
## 25%    129975.000000
## 50%    163000.000000
## 75%    214000.000000
## max    755000.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def helper_curtosis(x):
  # Texto sobre la curtosis de x
  # para agregar al gráfico
  sk = skew(x)
  sk_pval = skewtest(x)[0]
  return f&amp;#39;Curtosis:\n{sk:.2f} ({sk_pval:.3f})&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es asimética:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from scipy.stats import skew, skewtest

fig, ax = plt.subplots(1, 2, figsize=(12,4))

# SalePrice sin transformar
x = casas[&amp;quot;SalePrice&amp;quot;]
sns.distplot(x, kde=False, fit=stats.norm, ax=ax[0])
ax[0].text(400000, 0.000005, helper_curtosis(x), fontsize = 14)
#ax[0].set_title(&amp;quot;SalePrice&amp;quot;)

# SalePrice transformada
log1_x = np.log1p(casas[&amp;quot;SalePrice&amp;quot;])
sns.distplot(log1_x, kde=False, fit=stats.norm, ax=ax[1])
ax[1].text(12.6, 0.6, helper_curtosis(log1_x), fontsize = 14)
ax[1].set_xlabel(&amp;quot;log(1+SalePrice)&amp;quot;)

_ = fig.suptitle(&amp;quot;La transformación x = log(1+x) corrige la asimetría en SalePrice&amp;quot;, fontsize=16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2019-06-16-prediciendo-precios-propiedades_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1152&#34; /&gt;
El &lt;a href=&#34;https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.skewtest.html#scipy.stats.skewtest&#34;&gt;test de curtosis&lt;/a&gt; es una prueba estadística para determinar si la distibución es simétrica. En la variable original rechazamos que la distribución sea simétrica y en la transformada con &lt;code&gt;log(1+x)&lt;/code&gt; no rechazamos la hipótesis nula de que la distribución es simétrica.&lt;/p&gt;
&lt;div id=&#34;correlaciones-con-otras-columnas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Correlaciones con otras columnas&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Correlaciones con SalePrice
corr_sales_price = casas.corr()[&amp;quot;SalePrice&amp;quot;]

# Solo las mayores que 0.63 ordenadas descendiendo
corrs_altas = corr_sales_price[corr_sales_price &amp;gt; 0.4].sort_values(ascending = False)
print(corrs_altas)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## SalePrice       1.000000
## OverallQual     0.790982
## GrLivArea       0.708624
## GarageCars      0.640409
## GarageArea      0.623431
## TotalBsmtSF     0.613581
## 1stFlrSF        0.605852
## FullBath        0.560664
## TotRmsAbvGrd    0.533723
## YearBuilt       0.522897
## YearRemodAdd    0.507101
## GarageYrBlt     0.486362
## MasVnrArea      0.477493
## Fireplaces      0.466929
## Name: SalePrice, dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculamos las correlaciones de la variables objetivo con el resto de las variables para determinar en qué variables enfocarnos:&lt;/p&gt;
&lt;p&gt;La calidad de la casa (&lt;code&gt;OverallQual&lt;/code&gt;), el metraje (&lt;code&gt;GrLivArea&lt;/code&gt;), la cantidad de autos que entran en el garage (&lt;code&gt;GarageCars&lt;/code&gt;) y el metraje del garage (&lt;code&gt;GarageArea&lt;/code&gt;) son las variables continuas más importantes.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Marcar outlier
casas[&amp;quot;outlier&amp;quot;] = np.logical_and(casas[&amp;quot;GrLivArea&amp;quot;] &amp;gt; 4000, 
                                  casas[&amp;quot;SalePrice&amp;quot;] &amp;lt; 300000)

# Scatterplot

fig, ax = plt.subplots(1, 2, figsize=(12,4))
sns.scatterplot(x=&amp;quot;GrLivArea&amp;quot;, y=&amp;quot;SalePrice&amp;quot;, hue=&amp;quot;outlier&amp;quot;, data=casas, ax = ax[0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a28d505c0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;plt.title(&amp;quot;Dos propiedades baratas para su tamaño&amp;quot;, fontsize = 16)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Text(0.5, 1.0, &amp;#39;Dos propiedades baratas para su tamaño&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ax[1].set(xscale=&amp;quot;log&amp;quot;, yscale=&amp;quot;log&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [None, None]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ax[1].set_xlabel(&amp;quot;log&amp;quot;) #, ylabel = &amp;quot;log&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Text(0.5, 0, &amp;#39;log&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sns.scatterplot(x=&amp;quot;GrLivArea&amp;quot;, y=&amp;quot;SalePrice&amp;quot;, hue=&amp;quot;outlier&amp;quot;, data=casas, ax = ax[1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a299c5f28&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;_ = plt.title(&amp;quot;Transformación logarítmica&amp;quot;, fontsize = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2019-06-16-prediciendo-precios-propiedades_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;variables-numericas-discontinuas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variables numéricas discontinuas&lt;/h2&gt;
&lt;p&gt;Estas variables son numéricas pero representan cuentas (cantidad de baños, cantidad de cuartos, etc.).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Cantidad de baños, cantidad de garages
cuentas =   [&amp;quot;KitchenAbvGr&amp;quot;, &amp;quot;BedroomAbvGr&amp;quot;, 
             &amp;quot;Fireplaces&amp;quot;,   &amp;quot;BsmtFullBath&amp;quot;,
             &amp;quot;TotRmsAbvGrd&amp;quot;, &amp;quot;FullBath&amp;quot;,
             &amp;quot;HalfBath&amp;quot;,     &amp;quot;YearBuilt&amp;quot;]   

# Panel de (2, 3)
dim_panel = (2, 4)
fig, ax = plt.subplots(dim_panel[0], dim_panel[1], figsize=(12,8))
ax[1,3].tick_params(labelbottom = False)
fig.subplots_adjust(hspace=0.4, wspace=0.4)

# Ordenar los nombres de las columnas (2, 3) para iterar fácil
cols = np.reshape(np.array(cuentas)[:8], dim_panel) # tomo los primeros 6 para que entre en el panel
            
_ = [sns.countplot(x=cols[i, j], data=casas, ax = ax[i, j]) for i in range(dim_panel[0]) 
                                                              for j in range(dim_panel[1])]
        &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;variables-categoricas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variables categóricas&lt;/h2&gt;
&lt;p&gt;Estas variables son categorías y las modelamos como &lt;em&gt;dummies&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;categoricas = [&amp;quot;LotShape&amp;quot;,     &amp;quot;LandContour&amp;quot;,   &amp;quot;BldgType&amp;quot;,   &amp;quot;Foundation&amp;quot;,
               &amp;quot;Neighborhood&amp;quot;, &amp;quot;Exterior1st&amp;quot;,   &amp;quot;LandSlope&amp;quot;,  &amp;quot;HouseStyle&amp;quot;,  
               &amp;quot;PavedDrive&amp;quot;,   &amp;quot;SaleCondition&amp;quot;, &amp;quot;RoofStyle&amp;quot;,  &amp;quot;CentralAir&amp;quot;,     
               &amp;quot;LotShape&amp;quot;,     &amp;quot;LandContour&amp;quot;,   &amp;quot;MSZoning&amp;quot;,   &amp;quot;SaleType&amp;quot;,
               &amp;quot;Street&amp;quot;,       &amp;quot;Utilities&amp;quot;,     &amp;quot;Heating&amp;quot;,    &amp;quot;RoofMatl&amp;quot;,
               &amp;quot;Exterior2nd&amp;quot;,  &amp;quot;LotConfig&amp;quot;,                                     
               &amp;quot;Alley&amp;quot;,        &amp;quot;Electrical&amp;quot;,   &amp;quot;BsmtFinType1&amp;quot;, &amp;quot;BsmtFinType2&amp;quot;,  # Tienen Nan
               &amp;quot;GarageType&amp;quot;,   &amp;quot;MiscFeature&amp;quot;,   &amp;quot;MasVnrType&amp;quot;,  &amp;quot;Fence&amp;quot;          # Tienen Nan
              ]




dim_panel = (5, 5)
fig, ax = plt.subplots(dim_panel[0], dim_panel[1], figsize=(12,16))

# Apagar los tick labels cuando son demasiados
apagar_ejes = [
    (0, 2), (0, 3), (0, 4), 
    (1, 0), (1, 2), (1, 4), 
    (2, 0), (2, 2), (2, 3),
    (3, 0), (3, 3), (3, 4),
    (4, 0), (4, 1), (4, 3), (4, 4)
]

_ = [ax[plt].tick_params(labelbottom = False) for plt in apagar_ejes]

# Fijar los espacios entre los subplots
fig.subplots_adjust(hspace=0.4, wspace=0.6)

cols = np.reshape(np.array(categoricas)[:25], dim_panel)
_ = [sns.countplot(x=cols[i, j], data=casas, ax = ax[i, j]) for i in range(dim_panel[0]) 
                                                              for j in range(dim_panel[1])]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Street&lt;/code&gt;, &lt;code&gt;Utilities&lt;/code&gt;, &lt;code&gt;Heating&lt;/code&gt; y &lt;code&gt;RoofMatl&lt;/code&gt; tienen muy poca variación y pueden generar problemas en el modelo.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Sacar las problematicas
cat_problemas = [&amp;quot;Street&amp;quot;, &amp;quot;Utilities&amp;quot;, &amp;quot;Heating&amp;quot;, &amp;quot;RoofMatl&amp;quot;] 

#_ = [ categoricas.remove(col) for col in cat_problemas  ]


cat_missing = [&amp;quot;MasVnrType&amp;quot;,   &amp;quot;GarageType&amp;quot;,  
               #&amp;quot;Electrical&amp;quot;,   &amp;quot;MiscFeature&amp;quot;,
               &amp;quot;BsmtFinType1&amp;quot;, &amp;quot;BsmtFinType2&amp;quot;,
               &amp;quot;LotConfig&amp;quot;,    &amp;quot;Exterior2nd&amp;quot;,  &amp;quot;LandSlope&amp;quot;, 
               &amp;quot;Alley&amp;quot;,        &amp;quot;Fence&amp;quot; ]

_ = [ categoricas.remove(col) for col in cat_missing  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;variables-categoricas-ordinales&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variables Categóricas Ordinales&lt;/h2&gt;
&lt;p&gt;El último tipo de columna son las variables categóricas ordinales (ej: calidad de la piscina). En estos casos, la variable aparece como texto, pero en realidad queremos modelarla como numérica, porque Calidad = 2 es más que Calidad = 1. Para eso tenemos que recodificar las columnas.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ordinales = [&amp;quot;OverallQual&amp;quot;,  &amp;quot;OverallCond&amp;quot;, &amp;quot;ExterQual&amp;quot;,
             &amp;quot;ExterCond&amp;quot;,    &amp;quot;BsmtQual&amp;quot;,    &amp;quot;BsmtCond&amp;quot;,
             &amp;quot;BsmtExposure&amp;quot;, &amp;quot;HeatingQC&amp;quot;,   &amp;quot;KitchenQual&amp;quot;,
             &amp;quot;Functional&amp;quot;,   &amp;quot;FireplaceQu&amp;quot;, &amp;quot;PoolQC&amp;quot;,
             &amp;quot;GarageFinish&amp;quot;, &amp;quot;GarageCond&amp;quot;,  &amp;quot;GarageQual&amp;quot;,
             &amp;quot;Fence&amp;quot;] &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Llevamos las que tienen escalas de calidad (Ex, Gd, Fa, Po) a una escala común. Por ejemplo,cuando es &lt;em&gt;missing&lt;/em&gt; la dejamos en 0. Si la calidad de la piscina es missing, es porque la propiedad no tiene piscina y está bien que quede en 0.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def cambiar_escala(df, col, escala):
  print(f&amp;#39;\n{col}\n&amp;#39;)
  print(casas[col].value_counts(dropna = False))
  # reemplazar missings
  casas[col].fillna(&amp;quot;MISSING&amp;quot;, inplace = True)
  # aplicar escala_ordinal
  casas[col].replace(escala, inplace = True)
  print(casas[col].value_counts(dropna = False))
  print(&amp;quot;-&amp;quot; * 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Po &amp;lt; Fa &amp;lt; TA &amp;lt; Gd &amp;lt; Ex
ESCALA_ORDINAL = { &amp;quot;MISSING&amp;quot;: 0, &amp;quot;Po&amp;quot; : 1, &amp;quot;Fa&amp;quot; : 2, 
                   &amp;quot;TA&amp;quot; : 3,     &amp;quot;Gd&amp;quot; : 4, &amp;quot;Ex&amp;quot; : 5}

ordinales_escala_comun = [ &amp;quot;ExterQual&amp;quot;,   &amp;quot;ExterCond&amp;quot;,   
                           &amp;quot;BsmtQual&amp;quot;,    &amp;quot;BsmtCond&amp;quot;,     
                           &amp;quot;HeatingQC&amp;quot;,   &amp;quot;KitchenQual&amp;quot;,  
                           &amp;quot;FireplaceQu&amp;quot;, &amp;quot;PoolQC&amp;quot;,       
                           &amp;quot;GarageCond&amp;quot;  ]

# cambiar casas inplace
_ = [ cambiar_escala(casas, col, ESCALA_ORDINAL) for col in ordinales_escala_comun]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ExterQual
## 
## TA    906
## Gd    488
## Ex     52
## Fa     14
## Name: ExterQual, dtype: int64
## 3    906
## 4    488
## 5     52
## 2     14
## Name: ExterQual, dtype: int64
## --------------------
## 
## ExterCond
## 
## TA    1282
## Gd     146
## Fa      28
## Ex       3
## Po       1
## Name: ExterCond, dtype: int64
## 3    1282
## 4     146
## 2      28
## 5       3
## 1       1
## Name: ExterCond, dtype: int64
## --------------------
## 
## BsmtQual
## 
## TA     649
## Gd     618
## Ex     121
## NaN     37
## Fa      35
## Name: BsmtQual, dtype: int64
## 3    649
## 4    618
## 5    121
## 0     37
## 2     35
## Name: BsmtQual, dtype: int64
## --------------------
## 
## BsmtCond
## 
## TA     1311
## Gd       65
## Fa       45
## NaN      37
## Po        2
## Name: BsmtCond, dtype: int64
## 3    1311
## 4      65
## 2      45
## 0      37
## 1       2
## Name: BsmtCond, dtype: int64
## --------------------
## 
## HeatingQC
## 
## Ex    741
## TA    428
## Gd    241
## Fa     49
## Po      1
## Name: HeatingQC, dtype: int64
## 5    741
## 3    428
## 4    241
## 2     49
## 1      1
## Name: HeatingQC, dtype: int64
## --------------------
## 
## KitchenQual
## 
## TA    735
## Gd    586
## Ex    100
## Fa     39
## Name: KitchenQual, dtype: int64
## 3    735
## 4    586
## 5    100
## 2     39
## Name: KitchenQual, dtype: int64
## --------------------
## 
## FireplaceQu
## 
## NaN    690
## Gd     380
## TA     313
## Fa      33
## Ex      24
## Po      20
## Name: FireplaceQu, dtype: int64
## 0    690
## 4    380
## 3    313
## 2     33
## 5     24
## 1     20
## Name: FireplaceQu, dtype: int64
## --------------------
## 
## PoolQC
## 
## NaN    1453
## Gd        3
## Fa        2
## Ex        2
## Name: PoolQC, dtype: int64
## 0    1453
## 4       3
## 5       2
## 2       2
## Name: PoolQC, dtype: int64
## --------------------
## 
## GarageCond
## 
## TA     1326
## NaN      81
## Fa       35
## Gd        9
## Po        7
## Ex        2
## Name: GarageCond, dtype: int64
## 3    1326
## 0      81
## 2      35
## 4       9
## 1       7
## 5       2
## Name: GarageCond, dtype: int64
## --------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ESCALA_FUNCTIONAL = { &amp;quot;Sal&amp;quot; : 0, &amp;quot;Sev&amp;quot; : 1,
                      &amp;quot;Maj2&amp;quot;: 2, &amp;quot;Maj1&amp;quot;: 3,
                      &amp;quot;Mod&amp;quot; : 4, &amp;quot;Min2&amp;quot;: 5,
                      &amp;quot;Min1&amp;quot;: 6, &amp;quot;Typ&amp;quot;: 7
                    }

cambiar_escala(casas, &amp;quot;Functional&amp;quot;, escala = ESCALA_FUNCTIONAL)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Functional
## 
## Typ     1360
## Min2      34
## Min1      31
## Mod       15
## Maj1      14
## Maj2       5
## Sev        1
## Name: Functional, dtype: int64
## 7    1360
## 5      34
## 6      31
## 4      15
## 3      14
## 2       5
## 1       1
## Name: Functional, dtype: int64
## --------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
       </item>
       
     </channel>
   </rss>

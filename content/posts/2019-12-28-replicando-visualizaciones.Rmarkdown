---
title: "Visualizando homicidios, exámenes y sarampiones"
author: ''
date: '2019-11-28'
slug: replicando-visualizaciones
tags: ["R", "ggplot", "tidytuesday"]
---
```{r, include=FALSE}
library(tidyverse)
library(here)

```

Este es mi primer post sobre tidy tuesday. Este proyecto, creado por [Thomas Mock](https://twitter.com/thomas_mock), publica un data set todo los martes y invita a los participantes a postear una visualización usándolo.

Para esta semana se publicaron tres juegos de datos provenientes de [este blog post](https://simplystatistics.org/2019/08/28/you-can-replicate-almost-any-plot-with-ggplot2/). La idea es mostrar el poder de `ggplot` para reproducir visualizaciones que encontró el autor por ahí.

# Homicidios

El primer dataset tiene la tasa de homicidios en 6 países del G-8: 

```{r, message=FALSE}
homicidios <- read_csv(here("static", "data", "tidytuesday","international_murders.csv"))

head(homicidios)
```

Este es el gráfico original:

![grafico original](https://abcnews.go.com/images/International/homocides_g8_countries_640x360_wmain.jpg)

Revisando la fuente de los datos encontré [esta app](https://dataunodc.un.org/GSH_app), sería interesante comparar a Uruguay en estos números, pero los datos no coinciden.

El diseño del gráfico es un bar chart, pero le agrega las banderas de los países y las tasas sobre las barras. 

Este es el gráfico base con títulos:
```{r}
# plot basico
g <- homicidios %>% 
  ggplot(aes(country, count)) +
  geom_col() + 
  labs(x="", y="# de homicidios con armas de fuego \n cada 100,000 habitantes", 
       caption = "Fuente: \nUNODC Homicide Statistics",
       title = "Tasa de Homicidios en países del G-8.")
g
```

Como mapeamos el eje x a una columna de texto, `ggplot` la convierte a un factor. El orden en el que aparecen los países en el eje depende de los niveles del factor, por defecto es alfabético:

```{r}
levels(factor(homicidios$country))
```

Esto es algo que puede confundir a alguien que no tiene experiencia trabajando con factores: el orden de los niveles es independiente del orden en que aparecen en el data frame.

En este caso, el orden del factor es alfabético (Canadá, Francia, etc.), y el data frame está ordenado por la tasa de homicidios (descendente): US, Italia, Canadá.

Para controlar el orden en el que aparecen los países ordenar las etiquetas, usamos una función muy útil de `forcats`: `fct_inorder`. Esta función reordena los niveles del factor para que coincida con el orden en el que aparecen en el data-frame:

```{r}
homicidios_2 <- homicidios %>% 
  arrange(-count) %>% 
  mutate(country_ordenado = fct_inorder(country))

levels(homicidios_2$country_ordenado)
```

Para la versión final, agrego las etiquetas del texto con `geom_text` (nudge_y me permite ajustar el texto un poco para que no toque las barras). 

También descubrí `ggflags`, que nos da una función `geom_flag` con el `aes` country para especificar el país. La coordenada y de todas las banderas la fijo en -.4.

```{r}
# install_github("rensa/ggflags")

library(ggflags)
library(ggthemes)
# theme_economist
# agrego texto sobre las columnas con geom_text y nudge_y
homicidios %>% 
  arrange(-count) %>% 
  mutate(country = fct_inorder(country)) %>% # fct_inorder
  ggplot(aes(country, count)) + 
  geom_col(fill="darkred") + 
  geom_flag(y = -.4, aes(country = code), size = 12) + # geom_flag
  geom_text(aes(label = if_else(country == "RUSSIA", "S/D", as.character(count))), 
                nudge_y = .15) + # nudge, label
  scale_x_discrete(labels=NULL) + # remove labels from x-axis
  labs(x="", y="# de homicidios con armas de fuego \n cada 100,000 habitantes", 
       caption = "Fuente: \nUNODC Homicide Statistics",
       title = "Tasa de Homicidios en países del G-8") + 
  theme_economist() +
  theme(
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    plot.caption = element_text(vjust = 170) # mover caption
  )


```




# Diplopma Regents

Los exámenes Regents son una serie de tests estándar de temas de secundaria en el estado de Nueva York. Este set de datos muestra las notas de 

```{r}

nyc_regents <-  read_csv(here("static", "data", "tidytuesday","nyc_regents.csv")
)

# reshape

nyc_reshape <- nyc_regents %>% 
  gather(k="subject", v="tests", -score) %>% 
  group_by(score) %>% 
  summarize(tests = sum(tests, na.rm = TRUE))

# plot basico
g <- ggplot(nyc_reshape, aes(score, tests)) + 
  geom_col()

# Texto

g + 
  labs(caption = "Fuente: New York City Department of Education",
       title = "Salvar Raspando",
       subtitle = "2010 Regents scores on Algebra, \nGlobal History, Biology, English & US History", 
       y = "", x = "")
  
# Ejes
# Scales en el grammar of graphics
# Customizando los ejes con scale_x_* y scale_y_*
# le pasamos una función a labels
# expand es contraintuitivamente importante
# labels, breaks, expand
g + 
  
  labs(caption = "Source: New York City Department of Education",
       title = "Scraping By",
       subtitle = "2010 Regents scores on Algebra, \nGlobal History, Biology, English & US History", 
       y = "", x = "") + 
  scale_x_continuous(breaks = seq(0, 100, 5), expand = expand_scale(add = c(0, 0))) + 
  scale_y_continuous(position = "right", 
                     labels = scales::number_format(big.mark = ","), # function
                     breaks = c(1e4, 2e4, 3e4))


# Theme
g + labs(caption = "Fuente: New York City Department of Education",
       title = "Salvar Raspando",
       subtitle = "Notas 2010 Regents en Álgebra, \nHistoria, Biología, e Inglés",
       y = "", x = "") + 
  scale_x_continuous(breaks = seq(0, 100, 5), expand = expand_scale(add = c(0, 0))) + 
  scale_y_continuous(position = "right", 
                     labels = scales::number_format(big.mark = ","), # function
                     breaks = c(1e4, 2e4, 3e4)) + 
  theme_minimal() + 
  theme(
    panel.grid.major.y = element_line(linetype = "dashed", color = "gray50"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.y = element_text(vjust = 1.5),
    axis.text.x = element_text(vjust = 7),
    plot.margin = margin(unit(c(20, 20, 20, 20), "cm"))
  )

# color a las columnas
ggplot(nyc_reshape, aes(score, tests)) + 
  geom_col(color = "black", fill = "#C4843C") + 
  labs(caption = "Fuente: New York City Department of Education",
       title = "Salvar Raspando",
       subtitle = "Notas 2010 Regents en Álgebra, \nHistoria, Biología, e Inglés",
       y = "", x = "") + 
  scale_x_continuous(breaks = seq(0, 100, 5), expand = expand_scale(add = c(0, 0))) + 
  scale_y_continuous(position = "right", 
                     labels = scales::number_format(big.mark = ","), # function
                     breaks = c(1e4, 2e4, 3e4)) + 
  theme_minimal() + 
  theme(
    panel.grid.major.y = element_line(linetype = "dashed", color = "gray50"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.y = element_text(vjust = 1.5),
    axis.text.x = element_text(vjust = 7),
    plot.margin = margin(unit(c(20, 20, 20, 20), "cm"))
  )
  

# Todo junto
nyc_regents %>% 
  gather(k="k", v="v", -score) %>% 
  group_by(score) %>% 
  summarize(v = sum(v, na.rm = TRUE)) %>% 
  ggplot(aes(score, v)) +
  annotate("rect", xmin = 65, xmax=Inf, ymin=0, ymax=Inf, alpha = 0.6, fill = "grey80") + 
  annotate("text", 
           label = "Mìnimo para diploma Regents",
           x = 45, y = 2.5e4) + 
  annotate("segment", arrow=arrow(type = "closed", length = unit(0.2, "cm")), x=50, y=2.8e4, xend=64, yend=3.2e4) + 
  geom_col(color = "black", fill = "#C4843C") + 
  theme_minimal() + 
  scale_x_continuous(breaks = seq(0, 100, 5), expand = expand_scale(add = c(0, 0))) + 
  scale_y_continuous(position = "right", 
                     labels = scales::number_format(big.mark = ","), # function
                     breaks = c(1e4, 2e4, 3e4)) + 
  labs(caption = "Fuente: New York City Department of Education",
       title = "Salvar Raspando",
       subtitle = "Notas Regents 2010 en Álgebra, \nHistoria, Biología, e Inglés",
       y = "", x = "") +
  labs(y = "", x = "") +
  theme(
    panel.grid.major.y = element_line(linetype = "dashed", color = "gray50"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.y = element_text(vjust = 1.5),
    axis.text.x = element_text(vjust = 7),
    plot.margin = margin(unit(c(20, 20, 20, 20), "cm")) # 
  )

# Measels
# devtools::install_github("rafalab/dslabs")
library(dslabs)
diseases <- dslabs::us_contagious_diseases

# Research!
jet.colors <- colorRampPalette(c("#F0FFFF", "cyan", "#007FFF", "yellow", "#FFBF00", "orange", "red", "#7F0000"), bias = 2.25)


diseases %>% 
  filter(disease == "Measles") %>% 
  filter(!state %in% c("Hawaii", "Alaska")) %>% 
  mutate(rate = count / population * 10000 * 52 / weeks_reporting) %>% 
  mutate(state = reorder(state, desc(state))) %>% 
  ggplot(aes(year, state, fill=rate)) + 
  geom_tile(color = "white") + 
  scale_fill_gradientn(colors = jet.colors(16), na.value = "white", name = "Tasa") + ## research!
  scale_x_continuous(expand = c(0, 0)) + 
  labs(x = "", y = "", title = "Sarampión", subtitle = "Enfermos cada 10000 habitantes") +
  geom_vline(xintercept = 1963) + 
  annotate(geom = "text", x=1970, y = 50, label = "Introducción de la vacuna") + 
  theme_minimal() + 
  coord_cartesian(clip = 'off') + 
  theme(
    legend.position = "bottom",
  )
```

